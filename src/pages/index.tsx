import { Grid, Skeleton } from "@mantine/core";
import { PrismaClient } from "@prisma/client";
import { GetServerSidePropsContext, InferGetStaticPropsType } from "next";
import { unstable_getServerSession } from "next-auth";
import Head from "next/head";
import { useEffect } from "react";
import HomeCard from "../components/HomeCard";
import Layout from "../components/layouts/Layout";
import { categoryStore } from "../store/store";
import { trpc } from "../utils/trpc";
import { authOptions } from "./api/auth/[...nextauth]";

const Home = ({
  categories,
}: InferGetStaticPropsType<typeof getServerSideProps>) => {
  const { setSelectedCategory } = categoryStore();
  useEffect(() => {
    setSelectedCategory(categories[0] ?? ({} as any));
  }, []);

  const selectedCategory = categoryStore((state) => state.selectedCategory);

  const { data, isLoading } = trpc.home.getHomesByCategoryId.useQuery({
    categoryId: selectedCategory.id,
  });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="">
        <Layout>
          <Skeleton visible={isLoading}>
            <Grid>
              {data?.map((home) => {
                return (
                  <Grid.Col span={3}>
                    <HomeCard
                      price={home.price}
                      city={home.city}
                      country={home.country}
                      image={home.image}
                      id={home.id}
                    ></HomeCard>
                  </Grid.Col>
                );
              })}
            </Grid>
          </Skeleton>
        </Layout>
      </main>
    </>
  );
};

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await unstable_getServerSession(
    context.req,
    context.res,
    authOptions
  );

  const prisma = new PrismaClient();

  const categories = await prisma.category.findMany();
  // const session = await getSession(context.req);

  if (!session) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }

  return {
    props: {
      session,
      categories: categories,
    },
  };
}

export default Home;
