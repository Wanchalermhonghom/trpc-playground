import { Categories, PrismaClient } from "@prisma/client";
import { InferGetStaticPropsType } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import superjson from "superjson";

import { trpc } from "../utils/trpc";

const Home = ({
  categories,
}: InferGetStaticPropsType<typeof getStaticProps>) => {
  const parsedCategories: Categories[] = superjson.parse(categories);

  const [selectedCategory, setSelectedCategory] = useState<Categories>(
    parsedCategories.at(0)!
  );

  useEffect(() => {}, []);

  const { data, refetch } = trpc.home.getHomesByCategoryId.useQuery({
    categoryId: selectedCategory.id,
  });

  console.log(data);
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <div className="flex items-center gap-2">
            {parsedCategories?.map((category) => {
              return (
                <button
                  onClick={() => {
                    setSelectedCategory(category);
                  }}
                  key={category.id}
                >
                  {category.name}
                </button>
              );
            })}
          </div>
          <div>
            {data?.map((home) => {
              return (
                <div key={home.id}>
                  <h1>{home.name}</h1>
                  <p>{home.city}</p>
                </div>
              );
            })}
          </div>
        </div>
      </main>
    </>
  );
};

export async function getStaticProps(context: any) {
  const prisma = new PrismaClient();

  const categories = await prisma.categories.findMany();

  return {
    props: {
      categories: superjson.stringify(categories),
    },
  };
}

export default Home;
